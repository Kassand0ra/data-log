<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Автоматизированный Протокол Наблюдений</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #111827;
            color: #E5E7EB;
        }

        /* Костыль для скролла */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #1F2937;
        }

        ::-webkit-scrollbar-thumb {
            background: #4B5563;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #6B7280;
        }

        .status-badge {
            padding: 2px 8px;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-inactive {
            background-color: #991B1B; /* bg-red-800 */
            color: #FEE2E2; /* text-red-100 */
        }

        .status-active {
            background-color: #166534; /* bg-green-800 */
            color: #DCFCE7; /* text-green-100 */
        }
        
        .status-pending {
            background-color: #9A3412; /* bg-orange-800 */
            color: #FFEDD5; /* text-orange-100 */
        }
        
        .status-observation {
            background-color: #1E40AF; /* bg-blue-800 */
            color: #DBEAFE; /* text-blue-100 */
        }
    </style>
</head>

<body class="antialiased">

    <div id="app" class="min-h-screen p-4 sm:p-6 lg:p-8">
        <div class="max-w-7xl mx-auto">
            <!-- Заголовок -->
            <header class="mb-6">
                <h1 class="text-2xl sm:text-3xl font-bold text-gray-100 tracking-tight">Автоматизированный Протокол Наблюдений</h1>
                <p class="text-sm text-gray-400 mt-1">
                    Система фиксации и анализа активности субъекта. User ID: <span id="userId" class="font-mono">...</span>
                    <span id="mode-status" class="ml-4 font-semibold"></span>
                </p>
            </header>

            <!-- Панель управления -->
            <div class="mb-4 flex flex-wrap gap-2 justify-between items-center">
                 <button id="add-record-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-all duration-200 ease-in-out">
                    + Добавить запись
                </button>
                <div class="flex gap-2">
                    <button id="export-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-all duration-200 ease-in-out">
                        Экспорт в файл
                    </button>
                </div>
            </div>

            <!-- Таблица -->
            <div class="bg-gray-900 shadow-2xl rounded-xl overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="w-full text-sm text-left text-gray-300">
                        <thead class="text-xs text-gray-300 uppercase bg-gray-800 tracking-wider">
                            <tr>
                                <th scope="col" class="px-6 py-3">Дата фиксации</th>
                                <th scope="col" class="px-6 py-3">Время среза (EEST)</th>
                                <th scope="col" class="px-6 py-3">Протокол наблюдения</th>
                                <th scope="col" class="px-6 py-3">Статус субъекта</th>
                                <th scope="col" class="px-6 py-3 text-right">Действия</th>
                            </tr>
                        </thead>
                        <tbody id="log-table-body">
                            <!-- Загрузка данных... -->
                            <tr>
                                <td colspan="5" class="text-center p-8 text-gray-500">
                                    <div id="loading-state">
                                        <svg class="animate-spin h-6 w-6 mx-auto mb-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                                        Инициализация системы...
                                    </div>
                                    <div id="empty-state" class="hidden">
                                        Протоколы отсутствуют. Первая запись будет создана автоматически.
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Модальное окно для добавления/редактирования -->
    <div id="modal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-gray-800 rounded-2xl shadow-xl w-full max-w-lg p-6 transform transition-all duration-300 scale-95 opacity-0" id="modal-content">
            <h2 id="modal-title" class="text-xl font-bold mb-4">Новая запись протокола</h2>
            <form id="log-form">
                <input type="hidden" id="log-id">
                <div class="space-y-4">
                    <div>
                        <label for="log-time" class="block text-sm font-medium text-gray-300 mb-1">Время среза</label>
                        <input type="time" id="log-time" required class="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div>
                        <label for="log-protocol" class="block text-sm font-medium text-gray-300 mb-1">Протокол наблюдения</label>
                        <textarea id="log-protocol" rows="4" required class="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Анализ коммуникационной активности..."></textarea>
                    </div>
                    <div>
                        <label for="log-status" class="block text-sm font-medium text-gray-300 mb-1">Статус субъекта</label>
                        <select id="log-status" required class="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="Ожидание данных">Ожидание данных</option>
                            <option value="Инактив">Инактив</option>
                            <option value="Актив">Актив</option>
                            <option value="Под наблюдением">Под наблюдением</option>
                        </select>
                    </div>
                </div>
                <div class="mt-6 flex justify-end space-x-3">
                    <button type="button" id="cancel-btn" class="bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg transition-colors">Отмена</button>
                    <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Сохранить</button>
                </div>
            </form>
        </div>
    </div>


    <script type="module">
        // Импорт модулей Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, collection, doc, addDoc, setDoc, deleteDoc, onSnapshot, query, getDoc
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // ===================================================================================
        // =================  ВАЖНО! ЧТОБЫ Я ПОТОМ НИХЕРА НЕ ЗАБЫЛ  ==========================
        // ===================================================================================
        // 1. Создать проект на https://firebase.google.com/
        // 2. Настроить проект.
        // 3. API ключ втоптать
        //    Попить чай.
        // 4. Настроить консоль
        //    Грабить караваны.
        // ===================================================================================
        const firebaseConfig = {
  apiKey: "AIzaSyA0vjmHF3sC4HB_6RSgsUesbEj4R2_kZR0",
  authDomain: "data-load-691c7.firebaseapp.com",
  projectId: "data-load-691c7",
  storageBucket: "data-load-691c7.firebasestorage.app",
  messagingSenderId: "365958727141",
  appId: "1:365958727141:web:cc1e0d05a061b6c0f55b0c",
  measurementId: "G-5BB0FHGEH4"
};

        
        const finalFirebaseConfig = typeof __firebase_config !== 'undefined' 
            ? JSON.parse(__firebase_config) 
            : firebaseConfig;
            
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-logbook-app';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // --- Глобальное состояние ---
        let isLocalMode = false;
        let localLogs = []; // Массив для хранения логов в локальном режиме
        let currentLogs = []; // Всегда актуальная копия логов для экспорта
        let currentUserId = null;
        let logsCollectionRef;
        let unsubscribe; // Для отписки от onSnapshot

        // --- Инициализация Firebase ---
        const app = initializeApp(finalFirebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // --- DOM элементы ---
        const tableBody = document.getElementById('log-table-body');
        const loadingState = document.getElementById('loading-state').parentElement;
        const emptyState = document.getElementById('empty-state');
        const userIdSpan = document.getElementById('userId');
        const modeStatusSpan = document.getElementById('mode-status');
        const exportBtn = document.getElementById('export-btn');
        
        const modal = document.getElementById('modal');
        const modalContent = document.getElementById('modal-content');
        const modalTitle = document.getElementById('modal-title');
        const addRecordBtn = document.getElementById('add-record-btn');
        const cancelBtn = document.getElementById('cancel-btn');
        const logForm = document.getElementById('log-form');
        const logIdInput = document.getElementById('log-id');
        const logTimeInput = document.getElementById('log-time');
        const logProtocolInput = document.getElementById('log-protocol');
        const logStatusInput = document.getElementById('log-status');
        
        // --- Функции для работы с модальным окном ---
        const openModal = (log = null) => {
            logForm.reset();
            if (log) {
                modalTitle.textContent = 'Редактировать запись протокола';
                logIdInput.value = log.id;
                logTimeInput.value = log.data.time || '';
                logProtocolInput.value = log.data.protocol || '';
                logStatusInput.value = log.data.status || 'Ожидание данных';
            } else {
                modalTitle.textContent = 'Новая запись протокола';
                logIdInput.value = '';
                 const now = new Date();
                 const hours = String(now.getHours()).padStart(2, '0');
                 const minutes = String(now.getMinutes()).padStart(2, '0');
                 logTimeInput.value = `${hours}:${minutes}`;
                 logProtocolInput.value = `Анализ коммуникационной активности (Субъект: "Мария") за отчетный период.`;
                 logStatusInput.value = 'Ожидание данных';
            }
            modal.classList.remove('hidden');
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
            }, 10);
        };
        
        const closeModal = () => {
            modalContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
                modal.classList.add('hidden');
            }, 300);
        };
        
        // --- Логика рендеринга и работы с данными ---
        const getStatusBadge = (status) => {
            let badgeClass = '';
            switch(status) {
                case 'Инактив': badgeClass = 'status-inactive'; break;
                case 'Актив': badgeClass = 'status-active'; break;
                case 'Под наблюдением': badgeClass = 'status-observation'; break;
                default: badgeClass = 'status-pending'; break;
            }
            return `<span class="status-badge ${badgeClass}">${status}</span>`;
        };

        const renderLogs = (logs) => {
            currentLogs = [...logs]; // Сохраняем копию для экспорта
            loadingState.classList.add('hidden');
            
            if (logs.length === 0) {
                emptyState.classList.remove('hidden');
                tableBody.innerHTML = '';
                return;
            }
            emptyState.classList.add('hidden');
            tableBody.innerHTML = '';

            logs.sort((a, b) => {
                 const dateA = a.data.date.split('.').reverse().join('-');
                 const dateB = b.data.date.split('.').reverse().join('-');
                 return new Date(dateB) - new Date(dateA);
            });
            
            logs.forEach(log => {
                const tr = document.createElement('tr');
                tr.className = "bg-gray-900 border-b border-gray-700 hover:bg-gray-800 transition-colors duration-200";
                tr.innerHTML = `
                    <td class="px-6 py-4 font-mono">${log.data.date}</td>
                    <td class="px-6 py-4 font-mono">${log.data.time || 'N/A'}</td>
                    <td class="px-6 py-4 whitespace-pre-wrap">${log.data.protocol || '...'}</td>
                    <td class="px-6 py-4">${getStatusBadge(log.data.status || '...')}</td>
                    <td class="px-6 py-4 text-right">
                        <button data-id="${log.id}" class="edit-btn font-medium text-blue-500 hover:underline mr-3">Изм.</button>
                        <button data-id="${log.id}" class="delete-btn font-medium text-red-500 hover:underline">Удл.</button>
                    </td>
                `;
                tableBody.appendChild(tr);
            });
        };
        
        // --- Экспорт данных ---
        const exportDataToFile = () => {
            if (currentLogs.length === 0) {
                alert("Нет данных для экспорта.");
                return;
            }
            const dataStr = JSON.stringify(currentLogs, null, 2);
            const dataBlob = new Blob([dataStr], {type: "application/json"});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            const today = new Date();
            const dateStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
            link.download = `logbook_backup_${dateStr}.json`;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        };

        // --- ЛОКАЛЬНЫЙ РЕЖИМ ---
        const saveLocalLogs = () => {
            try {
                localStorage.setItem('logbook-logs', JSON.stringify(localLogs));
            } catch (e) {
                console.error("Failed to save logs to localStorage:", e);
            }
        };

        const initLocalMode = () => {
            isLocalMode = true;
            modeStatusSpan.textContent = 'Локальный режим';
            modeStatusSpan.style.color = '#FBBF24'; // Tailwind amber-400
            userIdSpan.textContent = "local-user";
            try {
                const savedLogs = localStorage.getItem('logbook-logs');
                localLogs = savedLogs ? JSON.parse(savedLogs) : [];
            } catch (e) {
                console.error("Error parsing local logs:", e);
                localLogs = [];
            }
            renderLogs(localLogs);
            ensureTodaysEntry(localLogs);
        };

        // Автоматическое добавление записи на сегодня
        const ensureTodaysEntry = (logs) => {
            const today = new Date();
            const formattedToday = `${String(today.getDate()).padStart(2, '0')}.${String(today.getMonth() + 1).padStart(2, '0')}.${today.getFullYear()}`;
            const todayLogExists = logs.some(log => log.data.date === formattedToday);

            if (!todayLogExists) {
                const newEntryData = {
                    date: formattedToday, time: '', protocol: '', status: 'Ожидание данных',
                    createdAt: new Date().toISOString()
                };
                if (isLocalMode) {
                    const newEntry = { id: crypto.randomUUID(), data: newEntryData };
                    localLogs.push(newEntry);
                    saveLocalLogs();
                    renderLogs(localLogs);
                } else if (logsCollectionRef) {
                    addDoc(logsCollectionRef, newEntryData)
                        .catch(err => console.error("Ошибка авто-добавления записи: ", err));
                }
            }
        };

        // --- Инициализация после аутентификации (Облачный режим) ---
        const initCloudMode = (user) => {
            isLocalMode = false;
            modeStatusSpan.textContent = 'Облачный режим';
            modeStatusSpan.style.color = '#22C55E'; // Tailwind green-500
            currentUserId = user.uid;
            userIdSpan.textContent = currentUserId;
            
            const collectionPath = `/artifacts/${appId}/users/${currentUserId}/logs`;
            logsCollectionRef = collection(db, collectionPath);
            
            if (unsubscribe) unsubscribe(); 
            
            unsubscribe = onSnapshot(query(logsCollectionRef), (snapshot) => {
                const logs = snapshot.docs.map(doc => ({ id: doc.id, data: doc.data() }));
                renderLogs(logs);
                ensureTodaysEntry(logs);
            }, (error) => {
                console.error("Ошибка получения данных: ", error);
                tableBody.innerHTML = `<tr><td colspan="5" class="text-center p-8 text-red-400">Ошибка: Не удалось загрузить данные. Проверьте консоль.</td></tr>`;
            });
        };

        // --- Обработчики событий ---
        addRecordBtn.addEventListener('click', () => openModal());
        cancelBtn.addEventListener('click', closeModal);
        exportBtn.addEventListener('click', exportDataToFile);
        modal.addEventListener('click', (e) => {
            if (e.target === modal) closeModal();
        });

        logForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const logId = logIdInput.value;
            const logData = {
                time: logTimeInput.value,
                protocol: logProtocolInput.value,
                status: logStatusInput.value,
            };

            if (isLocalMode) {
                if (logId) { // Редактирование
                    const index = localLogs.findIndex(log => log.id === logId);
                    if (index > -1) localLogs[index].data = { ...localLogs[index].data, ...logData };
                } else { // Добавление
                    const today = new Date();
                    const formattedToday = `${String(today.getDate()).padStart(2, '0')}.${String(today.getMonth() + 1).padStart(2, '0')}.${today.getFullYear()}`;
                    logData.date = formattedToday;
                    logData.createdAt = new Date().toISOString();
                    localLogs.push({ id: crypto.randomUUID(), data: logData });
                }
                saveLocalLogs();
                renderLogs(localLogs);
            } else { // Облачный режим
                try {
                    if (logId) { // Редактирование
                        const docRef = doc(db, logsCollectionRef.path, logId);
                        const docSnap = await getDoc(docRef);
                        const existingData = docSnap.exists() ? docSnap.data() : {};
                        await setDoc(docRef, { ...existingData, ...logData });
                    } else { // Добавление
                         const today = new Date();
                         const formattedToday = `${String(today.getDate()).padStart(2, '0')}.${String(today.getMonth() + 1).padStart(2, '0')}.${today.getFullYear()}`;
                         logData.date = formattedToday;
                         logData.createdAt = new Date();
                         await addDoc(logsCollectionRef, logData);
                    }
                } catch (error) {
                    console.error("Ошибка сохранения записи: ", error);
                    alert("Не удалось сохранить запись.");
                }
            }
            closeModal();
        });
        
        tableBody.addEventListener('click', async (e) => {
             const target = e.target;
             const logId = target.dataset.id;
             if (!logId) return;

             if (target.classList.contains('edit-btn')) {
                 if (isLocalMode) {
                     const log = localLogs.find(l => l.id === logId);
                     if (log) openModal(log);
                 } else {
                     const docRef = doc(db, logsCollectionRef.path, logId);
                     const docSnap = await getDoc(docRef);
                     if (docSnap.exists()) openModal({id: logId, data: docSnap.data()});
                 }
             } else if (target.classList.contains('delete-btn')) {
                 if (confirm('Вы уверены, что хотите удалить эту запись?')) {
                     if (isLocalMode) {
                         localLogs = localLogs.filter(log => log.id !== logId);
                         saveLocalLogs();
                         renderLogs(localLogs);
                     } else {
                         try {
                            await deleteDoc(doc(db, logsCollectionRef.path, logId));
                         } catch(error) {
                             console.error("Ошибка удаления записи: ", error);
                             alert("Не удалось удалить запись.");
                         }
                     }
                 }
             }
        });

        // --- Главный входной цикл: Аутентификация ---
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                initCloudMode(user);
            } else {
                try {
                    // Сначала пытаемся войти с токеном, если он есть
                    const userCredential = initialAuthToken 
                        ? await signInWithCustomToken(auth, initialAuthToken)
                        // Если токена нет, пытаемся анонимно. Эта часть может вызвать ошибку на сервере
                        // если домен не авторизован или конфиг неверный.
                        : await signInAnonymously(auth);
                    initCloudMode(userCredential.user);
                } catch (error) {
                    // ЕСЛИ АУТЕНТИФИКАЦИЯ НЕ УДАЛАСЬ, ПЕРЕКЛЮЧАЕМСЯ В ЛОКАЛЬНЫЙ РЕЖИМ
                    console.warn("Authentication failed, switching to local mode. Error:", error.message);
                    initLocalMode();
                }
            }
        });

    </script>
</body>

</html>

